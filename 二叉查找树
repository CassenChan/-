class Node(object):
    def __init__(self, item):
        self.elem = item
        self.lchild = None
        self.rchild = None

class BinarySearchTree(object):
    def __init__(self, node=None):
        self.root = node

    def insert(self, item):
        node = Node(item)

        if self.root==None:
            self.root = node
        else:
            ptr = self.root
            while(1):
                if item>ptr.elem:
                    if ptr.rchild==None:
                        ptr.rchild = node
                        break
                    else:
                        ptr = ptr.rchild
                else:
                    if ptr.lchild == None:
                        ptr.lchild = node
                        break
                    else:
                        ptr = ptr.lchild

    def find(self, item):
        if self.root==None:
            return
        ptr = self.root
        while(ptr):
            if item<ptr.elem:
                ptr = ptr.lchild
            elif item>ptr.elem:
                ptr = ptr.rchild
            else:
                return ptr

    def delete(self, item):
        if self.root==None:
            return
        ptr = self.root
        while(1):
            if item<ptr.elem:
                pre = ptr
                ptr = ptr.lchild
            elif item>ptr.elem:
                pre = ptr
                ptr = ptr.rchild
            else:
                if ptr.rchild==None and ptr.lchild==None:
                    if pre.lchild == ptr:
                        pre.lchild = None
                    elif pre.rchild == ptr:
                        pre.rchild = None
                    break
                elif ptr.rchild==None and ptr.lchild!=None:
                    if pre.lchild == ptr:
                        pre.lchild = ptr.lchild
                    elif pre.rchild == ptr:
                        pre.rchild = ptr.lchild
                    break
                elif ptr.rchild!=None and ptr.lchild==None:
                    if pre.lchild == ptr:
                        pre.lchild = ptr.rchild
                    elif pre.rchild == ptr:
                        pre.rchild = ptr.rchild
                    break
                else:
                    prob = ptr.rchild
                    while(1):
                        if prob.lchild!=None:
                            success = prob
                            prob = prob.lchild
                        elif prob.lchild==None:
                            break
                    ptr.elem = prob.elem
                    if success.lchild == prob:
                        success.lchild = None
                    elif success.rchild == prob:
                        success.rchild = None
                    break

    def presearch(self, node):
        if node==None:
            return
        print(node.elem, end=' ')
        self.presearch(node.lchild)
        self.presearch(node.rchild)

    def insearch(self, node):
        if node==None:
            return
        self.insearch(node.lchild)
        print(node.elem, end=' ')
        self.insearch(node.rchild)

    def postsearch(self, node):
        if node==None:
            return
        self.postsearch(node.lchild)
        self.postsearch(node.rchild)
        print(node.elem, end=' ')

    def breadth_travel(self, root):
        if root == None:
            return
        queue = []
        queue.append(root)
        while queue:
            node = queue.pop(0)
            print(node.elem, end=' ')
            if node.lchild != None:
                queue.append(node.lchild)
            if node.rchild != None:
                queue.append(node.rchild)


if __name__=="__main__":
    tree = BinarySearchTree()
    tree.insert(33)
    tree.insert(16)
    tree.insert(13)
    tree.insert(18)
    tree.insert(17)
    tree.insert(25)
    tree.insert(19)
    tree.insert(27)
    tree.insert(50)
    tree.insert(51)
    tree.delete(18)

    # res = tree.find(18)
    # print(res.elem)
    tree.presearch(tree.root)
    print('+++')
    tree.insearch(tree.root)
    print('+++')
    tree.postsearch(tree.root)
    print('+++')
    tree.breadth_travel(tree.root)
    print('+++')

