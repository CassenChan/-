def buble_sort(nums):
    for j in range(len(nums)-1):
        for i in range(len(nums)-1):
            if nums[i]>nums[i+1]:
                nums[i], nums[i + 1] = nums[i+1], nums[i]
    return nums

def select_sort(nums):
    for j in range(len(nums)):
        min_num = nums[j]
        for i in range(j, len(nums)):
            if nums[i]<=min_num:
                min_num = nums[i]
                min_index = i
        nums[min_index], nums[j] = nums[j], nums[min_index]
    return nums

def insert_sort(nums):
    for i in range(1, len(nums)):
        while(i!=0):
           if nums[i]<nums[i-1]:
                nums[i], nums[i-1] = nums[i-1], nums[i]
           i = i-1
    return nums

def shell_sort(nums):
    gap = len(nums)
    while(gap!=0):
        gap = gap//2
        for i in range(gap, len(nums)):
            while(i>0):
                if nums[i]>=nums[i-gap]:
                    break
                elif nums[i]<nums[i-gap]:
                    nums[i], nums[i-gap] = nums[i-gap], nums[i]
                    i = i-gap
    return nums

def quick_sort(nums, start, end):
    if start >= end:
        return
    flag = nums[start]
    head, tail = start, end

    while(1):
        while head<tail and nums[head]<=flag:
            head += 1
        while head<tail and nums[tail]>=flag:
            tail -= 1
        nums[head], nums[tail] = nums[tail], nums[head]
        if head==tail:
            nums.insert(head, flag)
            nums.remove(flag)
            break
    quick_sort(nums, start, head-1)
    quick_sort(nums, head+1, end)
    return nums

def merge_sort(nums):
    if len(nums)<=1:
        return nums
    mid = len(nums)//2
    left = merge_sort(nums[0:mid])
    right = merge_sort(nums[mid:])
    res = merge(left, right)
    return res

def merge(left, right):
    l_index, r_index = 0, 0
    res = []
    while(1):
        if left[l_index]<right[r_index]:
            res.append(left[l_index])
            l_index += 1
        elif left[l_index]>=right[r_index]:
            res.append(right[r_index])
            r_index += 1
        if l_index == len(left):
            res.extend(right[r_index:])
            break
        if r_index == len(right):
            res.extend(left[l_index:])
            break
    return res


if __name__=="__main__":
    nums = [54,26,93,17,77,31,44,55,20]
    res = merge_sort(nums)
    print(res)

